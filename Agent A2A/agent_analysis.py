import os
import re
import httpx
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from pydantic_ai import Agent
import uvicorn
from schemas.schemas import AgentCard

load_dotenv()
os.getenv("OPENAI_API_KEY")

AGENT_CARD_ANALYSIS = AgentCard(
    agent_id="analysis_specialist_v1",
    name="Agente de An√°lise de Endere√ßo",
    description="Especialista em realizar an√°lises detalhadas de endere√ßos a partir de um CEP. Fornece insights sobre o tipo de regi√£o, caracter√≠sticas da √°rea e contexto geogr√°fico. Ideal para quando o usu√°rio pede para 'analisar' ou 'detalhar' um endere√ßo.",
    version="1.0.0",
    invocation_endpoint="http://localhost:8001/sse",
)

http_client: httpx.AsyncClient | None = None
agent = Agent(
    "openai:gpt-4o-mini",
    instructions="""üìú Voc√™ √© um assistente especialista em AN√ÅLISE DETALHADA de CEP. 
              Sua tarefa √© receber uma an√°lise do MCP Server e complement√°-la com insights sobre desenvolvimento, tend√™ncias e oportunidades.""",
)
app = FastAPI(title=AGENT_CARD_ANALYSIS.name)


async def chamar_mcp_analisar_endereco(cep: str) -> str:
    """Chama ferramenta de an√°lise no MCP Server."""
    assert http_client is not None, "HTTP Client n√£o inicializado"
    try:
        response = await http_client.post(
            "http://localhost:8000/mcp/analisar_endereco", json={"cep": cep}, timeout=30
        )
        response.raise_for_status()
        data: dict = response.json()
        return data.get("output", "Erro na resposta do MCP")
    except Exception as e:
        return f"‚ùå Erro ao chamar MCP: {str(e)}"


@app.get("/card", response_model=AgentCard)
async def get_agent_card_ANALYSIS():
    """Retorna o cart√£o de visita deste agente."""
    return AGENT_CARD_ANALYSIS


@app.get("/")
async def health():
    """Retorna um health check simples."""
    return {
        "status": "‚úÖ ONLINE",
        "service": AGENT_CARD_ANALYSIS.name,
        "id": AGENT_CARD_ANALYSIS.agent_id,
    }


@app.post("/sse")
async def a2a_endpoint(request: Request):
    """Endpoint principal de invoca√ß√£o do agente."""
    data = await request.json()
    message = data.get("message", "")
    cep_match = re.search(r"\b\d{5}-?\d{3}\b", message)
    if cep_match:
        cep = cep_match.group()
        resultado_mcp = await chamar_mcp_analisar_endereco(cep)
        if "‚ùå" in resultado_mcp:
            return {"success": False, "response": resultado_mcp}
        prompt_complemento = (
            f"Como especialista, complemente esta an√°lise de CEP: {resultado_mcp}."
        )
        result_agent = await agent.run(prompt_complemento)
        return {
            "success": True,
            "response": f"üß† **AN√ÅLISE ADICIONAL**\n\n{result_agent.output}",
        }
    else:
        result = await agent.run(
            f"O usu√°rio disse: '{message}'. Responda que voc√™ √© um especialista em an√°lises detalhadas e pe√ßa um CEP."
        )
        return {"success": True, "response": result.output}


@app.on_event("startup")
async def startup_event():
    global http_client
    http_client = httpx.AsyncClient(timeout=45.0)
    print(f"\nüöÄ {AGENT_CARD_ANALYSIS.name} FUNCIONANDO INICIADO! (porta 8001)")


@app.on_event("shutdown")
async def shutdown_event():
    if http_client:
        await http_client.aclose()


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8001, log_level="info")
